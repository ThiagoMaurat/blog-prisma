// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String     @id @default(uuid())
  name              String?
  email             String?    @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  created_at        DateTime?  @default(now())
  emailCodeVerified String?
  authoredPost      Post[]
  UserRole          UserRole[]
  Account           Account[]
  Session           Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoleType {
  admin
  reader
}

model Role {
  id    String     @id @default(uuid())
  name  RoleType   @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Themes {
  id     String       @id @default(uuid())
  name   String
  themes PostThemes[]
}

model Post {
  id          String       @id @default(uuid())
  title       String
  description String
  content     String
  publishedAt DateTime     @default(now())
  thumbnail   String
  authorId    String
  themesId    String
  author      User         @relation(fields: [authorId], references: [id])
  themes      PostThemes[]
}

model PostThemes {
  id       String @id @default(uuid())
  postId   String
  themesId String
  post     Post   @relation(fields: [postId], references: [id])
  themes   Themes @relation(fields: [themesId], references: [id])

  @@map("posts_themes")
}
